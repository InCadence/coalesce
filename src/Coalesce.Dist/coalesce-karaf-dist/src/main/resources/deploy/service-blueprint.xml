<!-- ///===========SECURITY CLASSIFICATION: UNCLASSIFIED======================== 
	/// Copyright 2015 - Lockheed Martin Corporation, All Rights Reserved /// 
	/// Notwithstanding any contractor copyright notice, the government has /// 
	Unlimited Rights in this work as defined by DFARS 252.227-7013 and /// 252.227-7014. 
	Use of this work other than as specifically authorized by /// these DFARS 
	Clauses may violate government rights in this work. /// /// DFARS Clause 
	reference: 252.227-7013 (a)(16) and 252.227-7014 (a)(16) /// Unlimited Rights. 
	The Government has the right to use, modify, /// reproduce, perform, display, 
	release or disclose this computer software /// in whole or in part, in any 
	manner, and for any purpose whatsoever, /// and to have or authorize others 
	to do so. /// /// Distribution Statement D. Distribution authorized to the 
	Department of /// Defense and U.S. DoD contractors only in support of US 
	DoD efforts. /// Other requests shall be referred to the ACINT Modernization 
	Program /// Management under the Director of the Office of Naval Intelligence. 
	/// ===============================UNCLASSIFIED================================= -->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxws="http://cxf.apache.org/blueprint/jaxws"
	xmlns:wsa="http://cxf.apache.org/ws/addressing" xmlns:http="http://cxf.apache.org/transports/http/configuration"
	xmlns:cxf="http://cxf.apache.org/blueprint/core" xmlns:sec="http://cxf.apache.org/configuration/security"
	xsi:schemaLocation="
                http://www.osgi.org/xmlns/blueprint/v1.0.0 
                http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd  
                http://cxf.apache.org/transports/http/configuration  
                http://cxf.apache.org/schemas/configuration/http-conf.xsd  
                http://cxf.apache.org/blueprint/jaxws 
                http://cxf.apache.org/schemas/blueprint/jaxws.xsd 
                http://cxf.apache.org/blueprint/core 
                http://cxf.apache.org/schemas/blueprint/core.xsd">

	<!-- This file contains the blueprint configuration that sets up CXF-based 
		secure Soap web services in Karaf. The file applies both bus-level and endpoint-level 
		configuration settings for cxf, but leaves the http-level and below configuration 
		to pax-web config parameters and jetty.xml. This file is structurally similar 
		to the sample Spring configuration file included with this code, wssec-server.xml. 
		There are 2 primary differences: - With Karaf/Pax-Web, the below endpoint 
		addresses are 'relative', and they are made available 'after' the CXF URL 
		that has been configured in karaf-home/etc/org.apache.cxf.osgi.cfg. With 
		the standalone/Spring configuration, these endpoint addresses are full URLs 
		with http format, hostname, port, and service address. - With Karaf/Pax-Web, 
		the web server port configurations are handled using karaf config files and 
		parameters. Please see karaf-home/etc/org.ops4j.pax.web.cfg and karaf-home/etc/jetty.xml 
		for the web server configurations. -->


	<!-- ======================= -->
	<!-- Bus-Level Configuration -->
	<!-- ======================= -->

	<!-- Enable or disable logging. When enabled, all web service traffic will 
		be logged, regardless of which service is handling traffic. Logging can also 
		be configured on a per-service basis if only specific service traffic should 
		be logged. -->
	<!-- <cxf:bus> -->
	<!-- <cxf:features> -->
	<!-- <cxf:logging /> -->
	<!-- </cxf:features> -->
	<!-- </cxf:bus> -->

	<!-- ========================== -->
	<!-- Persisters -->
	<!-- ========================== -->
	<bean id="postgres"
		class="com.incadencecorp.coalesce.framework.persistance.postgres.PostGreSQLPersistorExt">
		<property name="connectionSettings">
			<ref component-id="aws" />
		</property>
		<property name="schema" value="coalesce" />
	</bean>

	<bean id="neo4j"
		class="com.incadencecorp.coalesce.framework.persistance.neo4j.Neo4jSearchPersister">
		<property name="connectionSettings">
			<bean class="com.incadencecorp.coalesce.framework.persistance.ServerConn">
				<property name="portNumber" value="7474" />
				<property name="serverName" value="localhost" />
			</bean>
		</property>
		<property name="includeXml" value="true" />
	</bean>
	
	<!--
	<bean id="accumulo"
		class="com.incadencecorp.coalesce.framework.persistance.postgres.PostGreSQLPersistorExt">
		<property name="connectionSettings">
			<bean class="com.incadencecorp.coalesce.framework.persistance.ServerConn">
				<property name="database" value="rdk" />
				<property name="serverName" value="bdpnode4:2181,bdpnode5:2181,bdpnode6:2181" />
				<property name="user" value="root" />
				<property name="password" value="cloudbase123" />
			</bean>
		</property>
	</bean>
	-->
	<!-- ========================== -->
	<!-- CRUD Configuration -->
	<!-- ========================== -->

	<jaxws:endpoint xmlns:s="http://api.services.coalesce.incadencecorp.com/crud"
		id="crud" implementor="#crudservice" endpointName="s:CrudManagerPort"
		serviceName="s:CrudManagerService" address="/crud" wsdlLocation="wsdl/CrudService.wsdl">

		<jaxws:properties>
			<entry key="security.signature.username" value="myservicekey" />
			<entry key="security.signature.properties" value="file:/etc/pki/CA/conf/stsKeystore.properties" />
			<entry key="security.encryption.properties" value="file:/etc/pki/CA/conf/stsKeystore.properties" />

			<entry key="ws-security.signature.username" value="myservicekey" />
			<entry key="ws-security.signature.properties" value="file:/etc/pki/CA/conf/stsKeystore.properties" />
			<entry key="ws-security.encryption.properties" value="file:/etc/pki/CA/conf/stsKeystore.properties" />

			<entry key="mtom-enabled" value="true" />
		</jaxws:properties>

		<jaxws:features>
			<wsa:addressing allowDuplicates="false" />
		</jaxws:features>

	</jaxws:endpoint>

	<bean id="crudservice"
		class="com.incadencecorp.coalesce.services.crud.service.CrudServiceImpl">
		<argument ref="framework" />
	</bean>

	<bean id="framework" class="com.incadencecorp.coalesce.framework.CoalesceFramework">
		<property name="authoritativePersistor" ref="postgres" />
		<property name="secondaryPersistors">
            <array>
                <ref component-id="neo4j"/>
            </array>
		</property>
	</bean>

	<!-- ========================== -->
	<!-- Search Configuration -->
	<!-- ========================== -->

	<jaxws:endpoint xmlns:s="http://api.services.coalesce.incadencecorp.com/search"
		implementor="#searchservice" endpointName="s:SearchManagerPort"
		serviceName="s:SearchManagerService" address="/search" wsdlLocation="wsdl/SearchService.wsdl">

		<jaxws:properties>
			<entry key="security.signature.username" value="myservicekey" />
			<entry key="security.signature.properties" value="file:/etc/pki/CA/conf/stsKeystore.properties" />
			<entry key="security.encryption.properties" value="file:/etc/pki/CA/conf/stsKeystore.properties" />

			<entry key="ws-security.signature.username" value="myservicekey" />
			<entry key="ws-security.signature.properties" value="file:/etc/pki/CA/conf/stsKeystore.properties" />
			<entry key="ws-security.encryption.properties" value="file:/etc/pki/CA/conf/stsKeystore.properties" />

			<entry key="mtom-enabled" value="true" />
		</jaxws:properties>

		<jaxws:features>
			<wsa:addressing allowDuplicates="false" />
		</jaxws:features>

	</jaxws:endpoint>

	<bean id="searchservice"
		class="com.incadencecorp.coalesce.services.search.service.SearchServiceImpl">
		<argument ref="postgres" />
	</bean>

	<!-- ======================== -->
	<!-- Web Server Configuration -->
	<!-- ======================== -->

	<!-- Unlike the Spring configuration used for stand-alone client/server 
		testing with a stand-alone jetty instance, all web server configurations 
		in karaf are handled using karaf-home/etc/org.ops4j.pax.web.cfg and karaf-home/etc/jetty.xml 
		config files. These files handle all web server configurations including 
		ports, SSL, timeouts, etc. -->

	<!-- ========================== -->
	<!-- Peristor(s) Configuration -->
	<!-- ========================== -->

	<bean id="aws"
		class="com.incadencecorp.coalesce.framework.persistance.ServerConn">
		<property name="database" value="coalesce" />
		<property name="portNumber" value="5432" />
		<property name="serverName" value="52.222.74.184" />
		<property name="user" value="enterprisedb" />
		<property name="password" value="enterprisedb" />
	</bean>

	<!-- ======================== -->
	<!-- Framework Configuration -->
	<!-- ======================== -->

	<!-- Use this connector to specify location -->
	<bean id="relativeConnector"
		class="com.incadencecorp.unity.common.connectors.FilePropertyConnector">
		<argument value="../DSS-MDC-SNAPSHOT/conf" />
		<property name="readOnly" value="true" />
	</bean>

	<bean id="propertyFactory"
		class="com.incadencecorp.unity.common.factories.PropertyFactory">
		<argument ref="relativeConnector" />
	</bean>

</blueprint>
