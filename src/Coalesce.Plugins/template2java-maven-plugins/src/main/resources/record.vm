/*-----------------------------------------------------------------------------'
 Copyright 2017 - InCadence Strategic Solutions Inc., All Rights Reserved

 Notwithstanding any contractor copyright notice, the Government has Unlimited
 Rights in this work as defined by DFARS 252.227-7013 and 252.227-7014.  Use
 of this work other than as specifically authorized by these DFARS Clauses may
 violate Government rights in this work.

 DFARS Clause reference: 252.227-7013 (a)(16) and 252.227-7014 (a)(16)
 Unlimited Rights. The Government has the right to use, modify, reproduce,
 perform, display, release or disclose this computer software and to have or
 authorize others to do so.

 Distribution Statement D. Distribution authorized to the Department of
 Defense and U.S. DoD contractors only in support of U.S. DoD efforts.
 -----------------------------------------------------------------------------*/
package ${package};

import com.incadencecorp.coalesce.framework.datamodel.CoalesceFieldDefinition;
import com.incadencecorp.coalesce.framework.datamodel.CoalesceRecord;
import com.incadencecorp.coalesce.framework.datamodel.CoalesceRecordset;
import com.incadencecorp.coalesce.framework.datamodel.CoalesceSection;
import com.incadencecorp.coalesce.framework.datamodel.ECoalesceFieldDataTypes;
import com.incadencecorp.coalesce.framework.datamodel.IFieldEnum;

#foreach($fd in $definitions)
    #set($fieldtype = $fieldmapper.map($fd.getDataType()).getClass().getSimpleName())
import com.incadencecorp.coalesce.framework.datamodel.$fieldtype;
#end

/**
 * Generated by template2java do not modify
 * 
 * @author Coalesce
 */
public class ${name}Record extends CoalesceRecord {

    public enum Etest1Fields implements IFieldEnum {
#foreach($fd in $definitions)
#if( $foreach.hasNext )
        $fd.getName().toUpperCase().replaceAll(" ", "_")("$fd.getName()"),
#else
        $fd.getName().toUpperCase().replaceAll(" ", "_")("$fd.getName()");
#end
#end
    
        private String label;

         private Etest1Fields(final String label) {
             this.label = label;
        }

         @Override
         public String getFieldName() {
            return label;
        }    
    }

    /*--------------------------------------------------------------------------
    Constructor(s)
    --------------------------------------------------------------------------*/

    /**
     * Default Constructor
     */
    public ${name}Record()
    {
        super();
    }

    /**
     * Constructs a new instance from an existing record
     * 
     * @param record
     */
    public ${name}Record(CoalesceRecord record)
    {
        super(record);
    }

    /*--------------------------------------------------------------------------
    Factory Method(s)
    --------------------------------------------------------------------------*/

    /**
     * @param section
     * @param name
     * @return a record set that can be used for create new records of this
     *         type.
     */
    public static CoalesceRecordset createCoalesceRecordset(CoalesceSection section, String name)
    {

        CoalesceRecordset recordset = CoalesceRecordset.create(section, name);

#foreach($fd in $definitions)
        CoalesceFieldDefinition.create(recordset, "$fd.getName()", ECoalesceFieldDataTypes.$fd.getDataType(), "$fd.getLabel()", "$fd.getDefaultClassificationMarking().toString()", "$fd.getDefaultValue()", $fd.getNoIndex(), $fd.isDisableHistory());
#end
        
        return recordset;

    }

    /*--------------------------------------------------------------------------
    Public Getter(s)
    --------------------------------------------------------------------------*/
#foreach($fd in $definitions)
    #set($fieldtype = $fieldmapper.map($fd.getDataType()).getClass().getSimpleName())
    
    public $fieldtype get$fd.getName()Field()
    {
        return ($fieldtype) getFieldByName("$fd.getName()");
    }
#end
}