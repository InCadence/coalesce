/*-----------------------------------------------------------------------------'
 Copyright 2017 - InCadence Strategic Solutions Inc., All Rights Reserved

 Notwithstanding any contractor copyright notice, the Government has Unlimited
 Rights in this work as defined by DFARS 252.227-7013 and 252.227-7014.  Use
 of this work other than as specifically authorized by these DFARS Clauses may
 violate Government rights in this work.

 DFARS Clause reference: 252.227-7013 (a)(16) and 252.227-7014 (a)(16)
 Unlimited Rights. The Government has the right to use, modify, reproduce,
 perform, display, release or disclose this computer software and to have or
 authorize others to do so.

 Distribution Statement D. Distribution authorized to the Department of
 Defense and U.S. DoD contractors only in support of U.S. DoD efforts.
 -----------------------------------------------------------------------------*/
#set ($entity = $recordset.getEntity())
#set ($name = $normalizer.normalize($recordset.getName()))
#set ($definitions = $recordset.getFieldDefinitions())
package ${packagename_root}.${packagename_sub};
## Create Imports
#set($imports = [])
#if( $imports.add("java.util.List") ) #end
#if( $imports.add("com.fasterxml.jackson.annotation.JsonIgnore") ) #end
#if( $imports.add("com.incadencecorp.coalesce.framework.datamodel.CoalesceRecord") ) #end
#if( $imports.add("com.incadencecorp.coalesce.framework.datamodel.CoalesceRecordset") ) #end
#if( $imports.add("com.incadencecorp.coalesce.framework.datamodel.CoalesceSection") ) #end
#if( $imports.add("com.incadencecorp.coalesce.framework.datamodel.IFieldEnum") ) #end
#if( $imports.add("${packagename_root}.api.record.I${name}Record") ) #end
#if( $imports.add("${packagename_root}.impl.coalesce.factory.${name}CoalesceFactory") ) #end
#if( $imports.add("com.incadencecorp.coalesce.common.exceptions.CoalesceDataFormatException") ) #end
#if( $imports.add("com.incadencecorp.coalesce.framework.datamodel.CoalesceField") ) #end
#foreach($fd in $definitions)
    #set($fieldtype = $fieldmapper.map($fd.getDataType()).getClass().getSimpleName())
	#set($import = "com.incadencecorp.coalesce.framework.datamodel.${fieldtype}")
    #if( !$imports.contains( $import ) )
    	#if( $imports.add($import) ) #end
    #end
    ## For implementing the interface methods
	#if($fd.getDataType() == "DATE_TIME_TYPE")
		#set($import = "java.util.Date")
        #if( !$imports.contains( "org.joda.time.DateTime" ) ) #if( $imports.add("org.joda.time.DateTime") ) #end #end
	#elseif($fd.getDataType() == "GUID_TYPE")
		#set($import = "java.util.UUID")
	#elseif($fd.getDataType() == "LINE_STRING_TYPE")
		#set($import = "com.vividsolutions.jts.geom.LineString")
	#elseif($fd.getDataType() == "GEOCOORDINATE_LIST_TYPE")
		#set($import = "com.vividsolutions.jts.geom.MultiPoint")
	#elseif($fd.getDataType() == "GEOCOORDINATE_TYPE")
		#set($import = "com.vividsolutions.jts.geom.Point")
	#elseif($fd.getDataType() == "POLYGON_TYPE")
		#set($import = "com.vividsolutions.jts.geom.Polygon")
	#elseif($fd.getDataType() == "CIRCLE_TYPE")
		#set($import = "com.incadencecorp.coalesce.framework.datamodel.CoalesceCircle")
	#else
		#set($import = "false")
	#end
    #if( ${import} != false && !$imports.contains( $import ) )
    	#if( $imports.add($import) ) #end
    #end    
#end
$imports.sort(null)
#foreach($import in $imports)
import ${import};
#end

/**
 * Coalesce implementation of {@link I${name}Record} generated on $entity.getDateCreated().
 * 
 * @author coalesce-plugins-template2java
 */
public class ${classname} extends CoalesceRecord implements I${name}Record {

	private static final ${name}CoalesceFactory FACTORY = new ${name}CoalesceFactory();

	/**
	* Enumeration of the fields used by this record.
	*/
    public enum E${name}Fields implements IFieldEnum {
#foreach($fd in $definitions)
#if( $foreach.hasNext )
        $fd.getName().toUpperCase().replaceAll(" ", "_")("$fd.getName()"),
#else
        $fd.getName().toUpperCase().replaceAll(" ", "_")("$fd.getName()");
#end
#end
    
        private String label;

        E${name}Fields(final String label)
        {
             this.label = label;
        }

        @Override
        public String getFieldName()  
        {
            return label;
        }    

        public static E${name}Fields fromLabel(String label) 
        {
	    	for (E${name}Fields field : E${name}Fields.values()) 
            {
                if (field.getFieldName().equalsIgnoreCase(label)) 
                {
		    		return field;
                }
            }
            
            return null;
        }
    }

    /*--------------------------------------------------------------------------
    Constructor(s)
    --------------------------------------------------------------------------*/

    /**
     * Default Constructor
     */
    public ${classname}()
    {
        super();
    }

    /**
     * Constructs a new instance from an existing record
     * 
     * @param record
     */
    public ${classname}(CoalesceRecord record)
    {
        super(record);
    }

    /*--------------------------------------------------------------------------
    Factory Method(s)
    --------------------------------------------------------------------------*/

    /**
     * @param section
     * @param name
     * @return a record set that can be used for create new records of this
     *         type.
     */
    public static CoalesceRecordset createCoalesceRecordset(CoalesceSection section, String name)
    {
        CoalesceRecordset recordset = CoalesceRecordset.create(section, name);

		for (E${name}Fields field : E${name}Fields.values()) 
		{
			FACTORY.create(recordset, field);
		}
		
		recordset.setMaxRecords($recordset.getMaxRecords());
        recordset.setMinRecords($recordset.getMinRecords());
        
        return recordset;
    }

    public void populate(I${name}Record record) throws CoalesceDataFormatException 
    {
        setKey(record.getKey());
        setStatus(record.getStatus());
#foreach($fd in $definitions)
		set$normalizer.normalize($fd.getName())(record.get$normalizer.normalize($fd.getName())());
#end
    }

    /*--------------------------------------------------------------------------
    Public Getter(s) / Setter(s)
    --------------------------------------------------------------------------*/

#foreach($fd in $definitions)
	@Override
    public $typemapper.map($fd.getDataType()) get$normalizer.normalize($fd.getName())() throws CoalesceDataFormatException
    {
#if($fd.getDataType() == "GEOCOORDINATE_TYPE")
        return get$normalizer.normalize($fd.getName())Field().getValueAsPoint();
#elseif($fd.getDataType() == "GEOCOORDINATE_LIST_TYPE")
        return get$normalizer.normalize($fd.getName())Field().getValueAsMultiPoint();
#elseif($fd.getDataType() == "DATE_TIME_TYPE")
        DateTime value = get$normalizer.normalize($fd.getName())Field().getValue();
        return value != null ? value.toDate() : null;
#else
        return get$normalizer.normalize($fd.getName())Field().getValue();
#end 
    }
    
    @Override
#if($fd.getDataType() == "LINE_STRING_TYPE" || $fd.getDataType() == "GEOCOORDINATE_LIST_TYPE" || $fd.getDataType() == "GEOCOORDINATE_TYPE" || 
    $fd.getDataType() == "POLYGON_TYPE" || $fd.getDataType() == "CIRCLE_TYPE")
    public void set$normalizer.normalize($fd.getName())($typemapper.map($fd.getDataType()) value) throws CoalesceDataFormatException
#else
    public void set$normalizer.normalize($fd.getName())($typemapper.map($fd.getDataType()) value)
#end    
    {
#if($fd.getDataType() == "FILE_TYPE")
#elseif($fd.getDataType() == "DATE_TIME_TYPE")
        get$normalizer.normalize($fd.getName())Field().setValue(value != null ? new DateTime(value.getTime()) : null);
#elseif($fd.getDataType() == "BINARY_TYPE")
#else
        get$normalizer.normalize($fd.getName())Field().setValue(value);
#end 
    }
    
#end
    /*--------------------------------------------------------------------------
    Public Field Getter(s)
    --------------------------------------------------------------------------*/
#foreach($fd in $definitions)
#set($fieldtype = $fieldmapper.map($fd.getDataType()).getClass().getSimpleName())

    @JsonIgnore
    public $fieldtype get$normalizer.normalize($fd.getName())Field()
    {
#set($enum = $fd.getName().toUpperCase().replaceAll(" ", "_"))
        return ($fieldtype) getFieldByName(E${name}Fields.${enum});
    }
#end

    /*--------------------------------------------------------------------------
    Overrides to add JsonIgnore
    --------------------------------------------------------------------------*/

    @JsonIgnore
    public List<CoalesceField<?>> getFields()
    {
        return super.getFields();
    }

    /*--------------------------------------------------------------------------
    Private Methods
    --------------------------------------------------------------------------*/

    private CoalesceField<?> getFieldByName(E${name}Fields field) 
    {
        return getFieldByName(field.getFieldName(), FACTORY);
    }

}
