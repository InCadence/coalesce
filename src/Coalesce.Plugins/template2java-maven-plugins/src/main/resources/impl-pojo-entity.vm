/*-----------------------------------------------------------------------------'
 Copyright 2017 - InCadence Strategic Solutions Inc., All Rights Reserved

 Notwithstanding any contractor copyright notice, the Government has Unlimited
 Rights in this work as defined by DFARS 252.227-7013 and 252.227-7014.  Use
 of this work other than as specifically authorized by these DFARS Clauses may
 violate Government rights in this work.

 DFARS Clause reference: 252.227-7013 (a)(16) and 252.227-7014 (a)(16)
 Unlimited Rights. The Government has the right to use, modify, reproduce,
 perform, display, release or disclose this computer software and to have or
 authorize others to do so.

 Distribution Statement D. Distribution authorized to the Department of
 Defense and U.S. DoD contractors only in support of U.S. DoD efforts.
 -----------------------------------------------------------------------------*/
#set ($name = $normalizer.normalize($entity.getName()))
package ${packagename_root}.${packagename_sub};
#set($imports = [])
#if( $imports.add("com.incadencecorp.coalesce.framework.datamodel.ECoalesceObjectStatus") ) #end
#if( $imports.add("org.joda.time.DateTime") ) #end
#if( $imports.add("${packagename_root}.api.entity.I${name}Entity") ) #end
#if( $imports.add("com.incadencecorp.coalesce.common.exceptions.CoalesceDataFormatException") ) #end
#foreach($recordset in $recordsets)
	#if( $imports.add("${packagename_root}.impl.pojo.record.$normalizer.normalize($recordset.getName())PojoRecord") ) #end
	#if( $imports.add("${packagename_root}.api.record.I$normalizer.normalize($recordset.getName())Record") ) #end
	#if(!($recordset.getMaxRecords() == 1 && $recordset.getMinRecords() == 1))
		#if(!$imports.contains( "java.util.List" ) && $imports.add("java.util.List")) #end
		#if(!$imports.contains( "java.util.Map" ) && $imports.add("java.util.Map")) #end
		#if(!$imports.contains( "java.util.HashMap" ) && $imports.add("java.util.HashMap")) #end
		#if(!$imports.contains( "java.util.ArrayList" ) && $imports.add("java.util.ArrayList")) #end
		#if(!$imports.contains( "java.util.UUID" ) && $imports.add("java.util.UUID")) #end
		#if(!$imports.contains( "com.incadencecorp.coalesce.common.helpers.StringHelper" ) && $imports.add("com.incadencecorp.coalesce.common.helpers.StringHelper")) #end
	#else
		#if(!$imports.contains( "com.fasterxml.jackson.annotation.JsonIgnore" ) && $imports.add("com.fasterxml.jackson.annotation.JsonIgnore")) #end
		#if(!$imports.contains( "com.fasterxml.jackson.annotation.JsonProperty" ) && $imports.add("com.fasterxml.jackson.annotation.JsonProperty")) #end
	#end
#end
$imports.sort(null)
#foreach($import in $imports)
import ${import};
#end

/**
 * Pojo implementation of {@link I${name}Entity} generated on $entity.getDateCreated().
 * 
 * @author coalesce-plugins-template2java
 */
public class ${classname} implements I${name}Entity {

    public static final String NAME = "$entity.getName()";
    public static final String SOURCE = "$entity.getSource()";
    public static final String VERSION = "$entity.getVersion()";

#foreach($recordset in $recordsets)
#if($recordset.getMaxRecords() == 1 && $recordset.getMinRecords() == 1)
    @JsonProperty
    private $normalizer.normalize($recordset.getName())PojoRecord $normalizer.normalizeVariable($recordset.getName())Record = new $normalizer.normalize($recordset.getName())PojoRecord();
#else
    private Map<String, $normalizer.normalize($recordset.getName())PojoRecord> $normalizer.normalizeVariable($recordset.getName())Records = new HashMap<>();
#end
#end
	
	private String key;
	private String title;
	private DateTime dateCreated;
	private String createdBy;
	private DateTime lastModified; 
	private String lastModifiedBy;
	private ECoalesceObjectStatus status;

    /**
     * Default Constructor
     */
    public ${classname}()
    {
        // Do Nothing
    }
    
    public ${classname}(I${name}Entity entity) throws CoalesceDataFormatException
    {
		setKey(entity.getKey());
		setDateCreated(entity.getDateCreated());
		setCreatedBy(entity.getCreatedBy());
		setLastModified(entity.getLastModified());
		setModifiedBy(entity.getModifiedBy());
		setStatus(entity.getStatus());    
        setTitle(entity.getTitle());

#foreach($recordset in $recordsets)
#if($recordset.getMaxRecords() == 1 && $recordset.getMinRecords() == 1)
        set$normalizer.normalize($recordset.getName())Record(entity.get$normalizer.normalize($recordset.getName())Record());
#else
        add$normalizer.normalize($recordset.getName())Record(entity.get$normalizer.normalize($recordset.getName())Records());
#end
#end
	}

    @Override
    public String getKey() 
    {
    	return key;
    }
    
    @Override
    public void setKey(String value)
    {
    	key = value; 
    }

    @Override
    public String getTitle()
    {
        return title;
    }

    @Override
    public void setTitle(String value)
    {
        title = value;
    }

    @Override
    public DateTime getDateCreated()
    {
        return dateCreated;
    }

    @Override
    public void setDateCreated(DateTime value)
    {
        dateCreated = value;
    }

    @Override
    public String getCreatedBy()
    {
        return createdBy;
    }

    public void setCreatedBy(String value)
    {
        createdBy = value;
    }

    @Override
    public DateTime getLastModified()
    {
        return lastModified;
    }

    @Override
    public void setLastModified(DateTime value)
    {
        lastModified = value;
    }

    @Override
    public String getModifiedBy()
    {
        return lastModifiedBy;
    }

    @Override
    public void setModifiedBy(String value)
    {
        lastModifiedBy = value;
    }

	@Override
    public ECoalesceObjectStatus getStatus()
    {
        return status;
    }
    
	@Override
    public void setStatus(ECoalesceObjectStatus value)
    {
        status = value;
    }

#foreach($recordset in $recordsets)
#set($recordset_name = "$normalizer.normalizeVariable($recordset.getName())Record")
#if($recordset.getMaxRecords() == 1 && $recordset.getMinRecords() == 1)
    @Override
    public $normalizer.normalize($recordset.getName())PojoRecord get$normalizer.normalize($recordset.getName())Record()
    {
        return ${recordset_name};
    }

    @JsonIgnore
    @Override
    public void set$normalizer.normalize($recordset.getName())Record(I$normalizer.normalize($recordset.getName())Record record) throws CoalesceDataFormatException
    {
        ${recordset_name} = new $normalizer.normalize($recordset.getName())PojoRecord(record);
    }
/*
    public void set$normalizer.normalize($recordset.getName())Record($normalizer.normalize($recordset.getName())PojoRecord record) throws CoalesceDataFormatException
    {
        ${recordset_name} = new $normalizer.normalize($recordset.getName())PojoRecord(record);
    }
*/
#else

    @Override
    public void add$normalizer.normalize($recordset.getName())Record(List<I$normalizer.normalize($recordset.getName())Record> records) throws CoalesceDataFormatException
    {
        for (I$normalizer.normalize($recordset.getName())Record value : records)
        {
            ${recordset_name}s.put(value.getKey(), new $normalizer.normalize($recordset.getName())PojoRecord(value));
        }
	}

    @Override
    public $normalizer.normalize($recordset.getName())PojoRecord add$normalizer.normalize($recordset.getName())Record()
    {
		$normalizer.normalize($recordset.getName())PojoRecord result = new $normalizer.normalize($recordset.getName())PojoRecord();
		${recordset_name}s.put(result.getKey(), result);
        return result;
    }

    @Override
    public List<I$normalizer.normalize($recordset.getName())Record> get$normalizer.normalize($recordset.getName())Records()
    {
        return new ArrayList<>(${recordset_name}s.values());
    }

    private void set$normalizer.normalize($recordset.getName())Records(List<$normalizer.normalize($recordset.getName())PojoRecord> values) throws CoalesceDataFormatException
    {
        ${recordset_name}s.clear();
        for (I$normalizer.normalize($recordset.getName())Record record : values)
        {
            if (StringHelper.isNullOrEmpty(record.getKey()))
            {
                record.setKey(UUID.randomUUID().toString());
            }
            ${recordset_name}s.put(record.getKey(), new $normalizer.normalize($recordset.getName())PojoRecord(record));
        }
    }

    @Override
    public $normalizer.normalize($recordset.getName())PojoRecord get$normalizer.normalize($recordset.getName())Record(String key)
    {
		return ${recordset_name}s.get(key);
    }

    @Override
    public void rmv$normalizer.normalize($recordset.getName())Record(I$normalizer.normalize($recordset.getName())Record record)
    {
        rmv$normalizer.normalize($recordset.getName())Record(record.getKey());
    }

    @Override
    public void rmv$normalizer.normalize($recordset.getName())Record(String key)
    {
		${recordset_name}s.remove(key);
    }

#end
#end

}
