#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Fri Nov  9 11:35:50 2018 by generateDS.py version 2.29.24.
# Python 2.7.15 |Anaconda, Inc.| (default, May  1 2018, 18:37:09) [MSC v.1500 64 bit (AMD64)]
#
# Command line options:
#   ('-f', '')
#   ('-o', 'entity.py')
#
# Command line arguments:
#   ../../Coalesce/schema/Entity.xsd
#
# Command line:
#   C:/Anaconda2/Scripts/generateDS.py -f -o "entity.py" ../../Coalesce/schema/Entity.xsd
#
# Current working directory (os.getcwd()):
#   XSD
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)

    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class ECoalesceObjectStatus(object):
    NEW='new'
    ACTIVE='active'
    DELETED='deleted'
    READONLY='readonly'
    UNKNOWN='unknown'


class constraintType(object):
    REGEX='regex'
    MANDATORY='mandatory'
    MIN='min'
    MAX='max'
    ENUMERATION='enumeration'
    SIZE='size'
    CUSTOM='custom'


class coalesceObjectType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, key=None, datecreated=None, lastmodified=None, name=None, status=None, noindex=None, modifiedby=None, modifiedbyip=None, objectversion=None, objectversionstatus=None, previoushistorykey=None, extensiontype_=None):
        self.original_tagname_ = None
        self.key = _cast(None, key)
        if isinstance(datecreated, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(datecreated, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = datecreated
        self.datecreated = initvalue_
        if isinstance(lastmodified, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(lastmodified, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = lastmodified
        self.lastmodified = initvalue_
        self.name = _cast(None, name)
        self.status = _cast(None, status)
        self.noindex = _cast(bool, noindex)
        self.modifiedby = _cast(None, modifiedby)
        self.modifiedbyip = _cast(None, modifiedbyip)
        self.objectversion = _cast(int, objectversion)
        self.objectversionstatus = _cast(None, objectversionstatus)
        self.previoushistorykey = _cast(None, previoushistorykey)
        self.anyAttributes_ = {}
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, coalesceObjectType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if coalesceObjectType.subclass:
            return coalesceObjectType.subclass(*args_, **kwargs_)
        else:
            return coalesceObjectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_key(self): return self.key
    def set_key(self, key): self.key = key
    def get_datecreated(self): return self.datecreated
    def set_datecreated(self, datecreated): self.datecreated = datecreated
    def get_lastmodified(self): return self.lastmodified
    def set_lastmodified(self, lastmodified): self.lastmodified = lastmodified
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def get_noindex(self): return self.noindex
    def set_noindex(self, noindex): self.noindex = noindex
    def get_modifiedby(self): return self.modifiedby
    def set_modifiedby(self, modifiedby): self.modifiedby = modifiedby
    def get_modifiedbyip(self): return self.modifiedbyip
    def set_modifiedbyip(self, modifiedbyip): self.modifiedbyip = modifiedbyip
    def get_objectversion(self): return self.objectversion
    def set_objectversion(self, objectversion): self.objectversion = objectversion
    def get_objectversionstatus(self): return self.objectversionstatus
    def set_objectversionstatus(self, objectversionstatus): self.objectversionstatus = objectversionstatus
    def get_previoushistorykey(self): return self.previoushistorykey
    def set_previoushistorykey(self, previoushistorykey): self.previoushistorykey = previoushistorykey
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_ECoalesceObjectStatus(self, value):
        # Validate type ECoalesceObjectStatus, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['new', 'active', 'deleted', 'readonly', 'unknown']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ECoalesceObjectStatus' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='coalesceObjectType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('coalesceObjectType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='coalesceObjectType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='coalesceObjectType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='coalesceObjectType'):
        unique_counter = 0
        for name, value in list(self.anyAttributes_.items()):
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.key is not None and 'key' not in already_processed:
            already_processed.add('key')
            outfile.write(' key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.key), input_name='key')), ))
        if self.datecreated is not None and 'datecreated' not in already_processed:
            already_processed.add('datecreated')
            outfile.write(' datecreated="%s"' % self.gds_format_datetime(self.datecreated, input_name='datecreated'))
        if self.lastmodified is not None and 'lastmodified' not in already_processed:
            already_processed.add('lastmodified')
            outfile.write(' lastmodified="%s"' % self.gds_format_datetime(self.lastmodified, input_name='lastmodified'))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.status is not None and 'status' not in already_processed:
            already_processed.add('status')
            outfile.write(' status=%s' % (quote_attrib(self.status), ))
        if self.noindex is not None and 'noindex' not in already_processed:
            already_processed.add('noindex')
            outfile.write(' noindex="%s"' % self.gds_format_boolean(self.noindex, input_name='noindex'))
        if self.modifiedby is not None and 'modifiedby' not in already_processed:
            already_processed.add('modifiedby')
            outfile.write(' modifiedby=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.modifiedby), input_name='modifiedby')), ))
        if self.modifiedbyip is not None and 'modifiedbyip' not in already_processed:
            already_processed.add('modifiedbyip')
            outfile.write(' modifiedbyip=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.modifiedbyip), input_name='modifiedbyip')), ))
        if self.objectversion is not None and 'objectversion' not in already_processed:
            already_processed.add('objectversion')
            outfile.write(' objectversion="%s"' % self.gds_format_integer(self.objectversion, input_name='objectversion'))
        if self.objectversionstatus is not None and 'objectversionstatus' not in already_processed:
            already_processed.add('objectversionstatus')
            outfile.write(' objectversionstatus=%s' % (quote_attrib(self.objectversionstatus), ))
        if self.previoushistorykey is not None and 'previoushistorykey' not in already_processed:
            already_processed.add('previoushistorykey')
            outfile.write(' previoushistorykey=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.previoushistorykey), input_name='previoushistorykey')), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='coalesceObjectType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('key', node)
        if value is not None and 'key' not in already_processed:
            already_processed.add('key')
            self.key = value
        value = find_attr_value_('datecreated', node)
        if value is not None and 'datecreated' not in already_processed:
            already_processed.add('datecreated')
            try:
                self.datecreated = self.gds_parse_datetime(value)
            except ValueError as exp:
                raise ValueError('Bad date-time attribute (datecreated): %s' % exp)
        value = find_attr_value_('lastmodified', node)
        if value is not None and 'lastmodified' not in already_processed:
            already_processed.add('lastmodified')
            try:
                self.lastmodified = self.gds_parse_datetime(value)
            except ValueError as exp:
                raise ValueError('Bad date-time attribute (lastmodified): %s' % exp)
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('status', node)
        if value is not None and 'status' not in already_processed:
            already_processed.add('status')
            self.status = value
            self.validate_ECoalesceObjectStatus(self.status)    # validate type ECoalesceObjectStatus
        value = find_attr_value_('noindex', node)
        if value is not None and 'noindex' not in already_processed:
            already_processed.add('noindex')
            if value in ('true', '1'):
                self.noindex = True
            elif value in ('false', '0'):
                self.noindex = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('modifiedby', node)
        if value is not None and 'modifiedby' not in already_processed:
            already_processed.add('modifiedby')
            self.modifiedby = value
        value = find_attr_value_('modifiedbyip', node)
        if value is not None and 'modifiedbyip' not in already_processed:
            already_processed.add('modifiedbyip')
            self.modifiedbyip = value
        value = find_attr_value_('objectversion', node)
        if value is not None and 'objectversion' not in already_processed:
            already_processed.add('objectversion')
            try:
                self.objectversion = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('objectversionstatus', node)
        if value is not None and 'objectversionstatus' not in already_processed:
            already_processed.add('objectversionstatus')
            self.objectversionstatus = value
            self.validate_ECoalesceObjectStatus(self.objectversionstatus)    # validate type ECoalesceObjectStatus
        value = find_attr_value_('previoushistorykey', node)
        if value is not None and 'previoushistorykey' not in already_processed:
            already_processed.add('previoushistorykey')
            self.previoushistorykey = value
        self.anyAttributes_ = {}
        for name, value in list(attrs.items()):
            if name not in already_processed:
                self.anyAttributes_[name] = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class coalesceObjectType


class coalesceObjectHistoryType(coalesceObjectType):
    subclass = None
    superclass = coalesceObjectType
    def __init__(self, key=None, datecreated=None, lastmodified=None, name=None, status=None, noindex=None, modifiedby=None, modifiedbyip=None, objectversion=None, objectversionstatus=None, previoushistorykey=None, disablehistory=None, history=None, extensiontype_=None):
        self.original_tagname_ = None
        super(coalesceObjectHistoryType, self).__init__(key, datecreated, lastmodified, name, status, noindex, modifiedby, modifiedbyip, objectversion, objectversionstatus, previoushistorykey, extensiontype_, )
        self.disablehistory = _cast(bool, disablehistory)
        if history is None:
            self.history = []
        else:
            self.history = history
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, coalesceObjectHistoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if coalesceObjectHistoryType.subclass:
            return coalesceObjectHistoryType.subclass(*args_, **kwargs_)
        else:
            return coalesceObjectHistoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_history(self): return self.history
    def set_history(self, history): self.history = history
    def add_history(self, value): self.history.append(value)
    def insert_history_at(self, index, value): self.history.insert(index, value)
    def replace_history_at(self, index, value): self.history[index] = value
    def get_disablehistory(self): return self.disablehistory
    def set_disablehistory(self, disablehistory): self.disablehistory = disablehistory
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.history or
            super(coalesceObjectHistoryType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='coalesceObjectHistoryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('coalesceObjectHistoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='coalesceObjectHistoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='coalesceObjectHistoryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='coalesceObjectHistoryType'):
        super(coalesceObjectHistoryType, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='coalesceObjectHistoryType')
        if self.disablehistory is not None and 'disablehistory' not in already_processed:
            already_processed.add('disablehistory')
            outfile.write(' disablehistory="%s"' % self.gds_format_boolean(self.disablehistory, input_name='disablehistory'))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='coalesceObjectHistoryType', fromsubclass_=False, pretty_print=True):
        super(coalesceObjectHistoryType, self).exportChildren(outfile, level, namespaceprefix_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for history_ in self.history:
            history_.export(outfile, level, namespaceprefix_, name_='history', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('disablehistory', node)
        if value is not None and 'disablehistory' not in already_processed:
            already_processed.add('disablehistory')
            if value in ('true', '1'):
                self.disablehistory = True
            elif value in ('false', '0'):
                self.disablehistory = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(coalesceObjectHistoryType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'history':
            obj_ = history.factory()
            obj_.build(child_)
            self.history.append(obj_)
            obj_.original_tagname_ = 'history'
        super(coalesceObjectHistoryType, self).buildChildren(child_, node, nodeName_, True)
# end class coalesceObjectHistoryType


class coalesceFieldType(coalesceObjectType):
    subclass = None
    superclass = coalesceObjectType
    def __init__(self, key=None, datecreated=None, lastmodified=None, name=None, status=None, noindex=None, modifiedby=None, modifiedbyip=None, objectversion=None, objectversionstatus=None, previoushistorykey=None, datatype=None, classificationmarking=None, label=None, value=None, inputlang=None, extensiontype_=None):
        self.original_tagname_ = None
        super(coalesceFieldType, self).__init__(key, datecreated, lastmodified, name, status, noindex, modifiedby, modifiedbyip, objectversion, objectversionstatus, previoushistorykey, extensiontype_, )
        self.datatype = _cast(None, datatype)
        self.classificationmarking = _cast(None, classificationmarking)
        self.label = _cast(None, label)
        self.value = _cast(None, value)
        self.inputlang = _cast(None, inputlang)
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, coalesceFieldType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if coalesceFieldType.subclass:
            return coalesceFieldType.subclass(*args_, **kwargs_)
        else:
            return coalesceFieldType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_datatype(self): return self.datatype
    def set_datatype(self, datatype): self.datatype = datatype
    def get_classificationmarking(self): return self.classificationmarking
    def set_classificationmarking(self, classificationmarking): self.classificationmarking = classificationmarking
    def get_label(self): return self.label
    def set_label(self, label): self.label = label
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def get_inputlang(self): return self.inputlang
    def set_inputlang(self, inputlang): self.inputlang = inputlang
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            super(coalesceFieldType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='coalesceFieldType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('coalesceFieldType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='coalesceFieldType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='coalesceFieldType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='coalesceFieldType'):
        super(coalesceFieldType, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='coalesceFieldType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
        if self.classificationmarking is not None and 'classificationmarking' not in already_processed:
            already_processed.add('classificationmarking')
            outfile.write(' classificationmarking=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.classificationmarking), input_name='classificationmarking')), ))
        if self.label is not None and 'label' not in already_processed:
            already_processed.add('label')
            outfile.write(' label=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.label), input_name='label')), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
        if self.inputlang is not None and 'inputlang' not in already_processed:
            already_processed.add('inputlang')
            outfile.write(' inputlang=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.inputlang), input_name='inputlang')), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='coalesceFieldType', fromsubclass_=False, pretty_print=True):
        super(coalesceFieldType, self).exportChildren(outfile, level, namespaceprefix_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
        value = find_attr_value_('classificationmarking', node)
        if value is not None and 'classificationmarking' not in already_processed:
            already_processed.add('classificationmarking')
            self.classificationmarking = value
        value = find_attr_value_('label', node)
        if value is not None and 'label' not in already_processed:
            already_processed.add('label')
            self.label = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
        value = find_attr_value_('inputlang', node)
        if value is not None and 'inputlang' not in already_processed:
            already_processed.add('inputlang')
            self.inputlang = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(coalesceFieldType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(coalesceFieldType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class coalesceFieldType


class fieldhistory(coalesceFieldType):
    subclass = None
    superclass = coalesceFieldType
    def __init__(self, key=None, datecreated=None, lastmodified=None, name=None, status=None, noindex=None, modifiedby=None, modifiedbyip=None, objectversion=None, objectversionstatus=None, previoushistorykey=None, datatype=None, classificationmarking=None, label=None, value=None, inputlang=None):
        self.original_tagname_ = None
        super(fieldhistory, self).__init__(key, datecreated, lastmodified, name, status, noindex, modifiedby, modifiedbyip, objectversion, objectversionstatus, previoushistorykey, datatype, classificationmarking, label, value, inputlang, )
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fieldhistory)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fieldhistory.subclass:
            return fieldhistory.subclass(*args_, **kwargs_)
        else:
            return fieldhistory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            super(fieldhistory, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='fieldhistory', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fieldhistory')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldhistory')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='fieldhistory', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fieldhistory'):
        super(fieldhistory, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fieldhistory')
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='fieldhistory', fromsubclass_=False, pretty_print=True):
        super(fieldhistory, self).exportChildren(outfile, level, namespaceprefix_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(fieldhistory, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(fieldhistory, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class fieldhistory


class field(coalesceFieldType):
    subclass = None
    superclass = coalesceFieldType
    def __init__(self, key=None, datecreated=None, lastmodified=None, name=None, status=None, noindex=None, modifiedby=None, modifiedbyip=None, objectversion=None, objectversionstatus=None, previoushistorykey=None, datatype=None, classificationmarking=None, label=None, value=None, inputlang=None, disablehistory=None, fieldhistory=None):
        self.original_tagname_ = None
        super(field, self).__init__(key, datecreated, lastmodified, name, status, noindex, modifiedby, modifiedbyip, objectversion, objectversionstatus, previoushistorykey, datatype, classificationmarking, label, value, inputlang, )
        self.disablehistory = _cast(bool, disablehistory)
        if fieldhistory is None:
            self.fieldhistory = []
        else:
            self.fieldhistory = fieldhistory
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, field)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if field.subclass:
            return field.subclass(*args_, **kwargs_)
        else:
            return field(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_fieldhistory(self): return self.fieldhistory
    def set_fieldhistory(self, fieldhistory): self.fieldhistory = fieldhistory
    def add_fieldhistory(self, value): self.fieldhistory.append(value)
    def insert_fieldhistory_at(self, index, value): self.fieldhistory.insert(index, value)
    def replace_fieldhistory_at(self, index, value): self.fieldhistory[index] = value
    def get_disablehistory(self): return self.disablehistory
    def set_disablehistory(self, disablehistory): self.disablehistory = disablehistory
    def hasContent_(self):
        if (
            self.fieldhistory or
            super(field, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='field', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('field')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='field')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='field', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='field'):
        super(field, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='field')
        if self.disablehistory is not None and 'disablehistory' not in already_processed:
            already_processed.add('disablehistory')
            outfile.write(' disablehistory="%s"' % self.gds_format_boolean(self.disablehistory, input_name='disablehistory'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='field', fromsubclass_=False, pretty_print=True):
        super(field, self).exportChildren(outfile, level, namespaceprefix_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for fieldhistory_ in self.fieldhistory:
            fieldhistory_.export(outfile, level, namespaceprefix_, name_='fieldhistory', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('disablehistory', node)
        if value is not None and 'disablehistory' not in already_processed:
            already_processed.add('disablehistory')
            if value in ('true', '1'):
                self.disablehistory = True
            elif value in ('false', '0'):
                self.disablehistory = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        super(field, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'fieldhistory':
            obj_ = fieldhistory.factory()
            obj_.build(child_)
            self.fieldhistory.append(obj_)
            obj_.original_tagname_ = 'fieldhistory'
        super(field, self).buildChildren(child_, node, nodeName_, True)
# end class field


class record(coalesceObjectHistoryType):
    subclass = None
    superclass = coalesceObjectHistoryType
    def __init__(self, key=None, datecreated=None, lastmodified=None, name=None, status=None, noindex=None, modifiedby=None, modifiedbyip=None, objectversion=None, objectversionstatus=None, previoushistorykey=None, disablehistory=None, history=None, field=None):
        self.original_tagname_ = None
        super(record, self).__init__(key, datecreated, lastmodified, name, status, noindex, modifiedby, modifiedbyip, objectversion, objectversionstatus, previoushistorykey, disablehistory, history, )
        if field is None:
            self.field = []
        else:
            self.field = field
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, record)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if record.subclass:
            return record.subclass(*args_, **kwargs_)
        else:
            return record(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_field(self): return self.field
    def set_field(self, field): self.field = field
    def add_field(self, value): self.field.append(value)
    def insert_field_at(self, index, value): self.field.insert(index, value)
    def replace_field_at(self, index, value): self.field[index] = value
    def hasContent_(self):
        if (
            self.field or
            super(record, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='record', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('record')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='record')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='record', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='record'):
        super(record, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='record')
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='record', fromsubclass_=False, pretty_print=True):
        super(record, self).exportChildren(outfile, level, namespaceprefix_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for field_ in self.field:
            field_.export(outfile, level, namespaceprefix_, name_='field', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(record, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'field':
            obj_ = field.factory()
            obj_.build(child_)
            self.field.append(obj_)
            obj_.original_tagname_ = 'field'
        super(record, self).buildChildren(child_, node, nodeName_, True)
# end class record


class constraint(coalesceObjectType):
    subclass = None
    superclass = coalesceObjectType
    def __init__(self, key=None, datecreated=None, lastmodified=None, name=None, status=None, noindex=None, modifiedby=None, modifiedbyip=None, objectversion=None, objectversionstatus=None, previoushistorykey=None, type_=None, value=None):
        self.original_tagname_ = None
        super(constraint, self).__init__(key, datecreated, lastmodified, name, status, noindex, modifiedby, modifiedbyip, objectversion, objectversionstatus, previoushistorykey, )
        self.type_ = _cast(None, type_)
        self.value = _cast(None, value)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, constraint)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if constraint.subclass:
            return constraint.subclass(*args_, **kwargs_)
        else:
            return constraint(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def validate_constraintType(self, value):
        # Validate type constraintType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['regex', 'mandatory', 'min', 'max', 'enumeration', 'size', 'custom']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on constraintType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            super(constraint, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='constraint', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('constraint')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='constraint')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='constraint', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='constraint'):
        super(constraint, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='constraint')
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='constraint', fromsubclass_=False, pretty_print=True):
        super(constraint, self).exportChildren(outfile, level, namespaceprefix_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
            self.validate_constraintType(self.type_)    # validate type constraintType
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
        super(constraint, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(constraint, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class constraint


class fielddefinition(coalesceObjectType):
    subclass = None
    superclass = coalesceObjectType
    def __init__(self, key=None, datecreated=None, lastmodified=None, name=None, status=None, noindex=None, modifiedby=None, modifiedbyip=None, objectversion=None, objectversionstatus=None, previoushistorykey=None, defaultclassificationmarking=None, defaultvalue=None, datatype=None, label=None, disablehistory=None, constraint=None):
        self.original_tagname_ = None
        super(fielddefinition, self).__init__(key, datecreated, lastmodified, name, status, noindex, modifiedby, modifiedbyip, objectversion, objectversionstatus, previoushistorykey, )
        self.defaultclassificationmarking = _cast(None, defaultclassificationmarking)
        self.defaultvalue = _cast(None, defaultvalue)
        self.datatype = _cast(None, datatype)
        self.label = _cast(None, label)
        self.disablehistory = _cast(bool, disablehistory)
        if constraint is None:
            self.constraint = []
        else:
            self.constraint = constraint
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fielddefinition)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fielddefinition.subclass:
            return fielddefinition.subclass(*args_, **kwargs_)
        else:
            return fielddefinition(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_constraint(self): return self.constraint
    def set_constraint(self, constraint): self.constraint = constraint
    def add_constraint(self, value): self.constraint.append(value)
    def insert_constraint_at(self, index, value): self.constraint.insert(index, value)
    def replace_constraint_at(self, index, value): self.constraint[index] = value
    def get_defaultclassificationmarking(self): return self.defaultclassificationmarking
    def set_defaultclassificationmarking(self, defaultclassificationmarking): self.defaultclassificationmarking = defaultclassificationmarking
    def get_defaultvalue(self): return self.defaultvalue
    def set_defaultvalue(self, defaultvalue): self.defaultvalue = defaultvalue
    def get_datatype(self): return self.datatype
    def set_datatype(self, datatype): self.datatype = datatype
    def get_label(self): return self.label
    def set_label(self, label): self.label = label
    def get_disablehistory(self): return self.disablehistory
    def set_disablehistory(self, disablehistory): self.disablehistory = disablehistory
    def hasContent_(self):
        if (
            self.constraint or
            super(fielddefinition, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='fielddefinition', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fielddefinition')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fielddefinition')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='fielddefinition', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='fielddefinition'):
        super(fielddefinition, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='fielddefinition')
        if self.defaultclassificationmarking is not None and 'defaultclassificationmarking' not in already_processed:
            already_processed.add('defaultclassificationmarking')
            outfile.write(' defaultclassificationmarking=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.defaultclassificationmarking), input_name='defaultclassificationmarking')), ))
        if self.defaultvalue is not None and 'defaultvalue' not in already_processed:
            already_processed.add('defaultvalue')
            outfile.write(' defaultvalue=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.defaultvalue), input_name='defaultvalue')), ))
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
        if self.label is not None and 'label' not in already_processed:
            already_processed.add('label')
            outfile.write(' label=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.label), input_name='label')), ))
        if self.disablehistory is not None and 'disablehistory' not in already_processed:
            already_processed.add('disablehistory')
            outfile.write(' disablehistory="%s"' % self.gds_format_boolean(self.disablehistory, input_name='disablehistory'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='fielddefinition', fromsubclass_=False, pretty_print=True):
        super(fielddefinition, self).exportChildren(outfile, level, namespaceprefix_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for constraint_ in self.constraint:
            constraint_.export(outfile, level, namespaceprefix_, name_='constraint', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('defaultclassificationmarking', node)
        if value is not None and 'defaultclassificationmarking' not in already_processed:
            already_processed.add('defaultclassificationmarking')
            self.defaultclassificationmarking = value
        value = find_attr_value_('defaultvalue', node)
        if value is not None and 'defaultvalue' not in already_processed:
            already_processed.add('defaultvalue')
            self.defaultvalue = value
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
        value = find_attr_value_('label', node)
        if value is not None and 'label' not in already_processed:
            already_processed.add('label')
            self.label = value
        value = find_attr_value_('disablehistory', node)
        if value is not None and 'disablehistory' not in already_processed:
            already_processed.add('disablehistory')
            if value in ('true', '1'):
                self.disablehistory = True
            elif value in ('false', '0'):
                self.disablehistory = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        super(fielddefinition, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'constraint':
            obj_ = constraint.factory()
            obj_.build(child_)
            self.constraint.append(obj_)
            obj_.original_tagname_ = 'constraint'
        super(fielddefinition, self).buildChildren(child_, node, nodeName_, True)
# end class fielddefinition


class recordset(coalesceObjectHistoryType):
    subclass = None
    superclass = coalesceObjectHistoryType
    def __init__(self, key=None, datecreated=None, lastmodified=None, name=None, status=None, noindex=None, modifiedby=None, modifiedbyip=None, objectversion=None, objectversionstatus=None, previoushistorykey=None, disablehistory=None, history=None, minrecords=0, maxrecords=0, fielddefinition=None, record=None):
        self.original_tagname_ = None
        super(recordset, self).__init__(key, datecreated, lastmodified, name, status, noindex, modifiedby, modifiedbyip, objectversion, objectversionstatus, previoushistorykey, disablehistory, history, )
        self.minrecords = _cast(int, minrecords)
        self.maxrecords = _cast(int, maxrecords)
        if fielddefinition is None:
            self.fielddefinition = []
        else:
            self.fielddefinition = fielddefinition
        if record is None:
            self.record = []
        else:
            self.record = record
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, recordset)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if recordset.subclass:
            return recordset.subclass(*args_, **kwargs_)
        else:
            return recordset(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_fielddefinition(self): return self.fielddefinition
    def set_fielddefinition(self, fielddefinition): self.fielddefinition = fielddefinition
    def add_fielddefinition(self, value): self.fielddefinition.append(value)
    def insert_fielddefinition_at(self, index, value): self.fielddefinition.insert(index, value)
    def replace_fielddefinition_at(self, index, value): self.fielddefinition[index] = value
    def get_record(self): return self.record
    def set_record(self, record): self.record = record
    def add_record(self, value): self.record.append(value)
    def insert_record_at(self, index, value): self.record.insert(index, value)
    def replace_record_at(self, index, value): self.record[index] = value
    def get_minrecords(self): return self.minrecords
    def set_minrecords(self, minrecords): self.minrecords = minrecords
    def get_maxrecords(self): return self.maxrecords
    def set_maxrecords(self, maxrecords): self.maxrecords = maxrecords
    def hasContent_(self):
        if (
            self.fielddefinition or
            self.record or
            super(recordset, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='recordset', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('recordset')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='recordset')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='recordset', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='recordset'):
        super(recordset, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='recordset')
        if self.minrecords != 0 and 'minrecords' not in already_processed:
            already_processed.add('minrecords')
            outfile.write(' minrecords="%s"' % self.gds_format_integer(self.minrecords, input_name='minrecords'))
        if self.maxrecords != 0 and 'maxrecords' not in already_processed:
            already_processed.add('maxrecords')
            outfile.write(' maxrecords="%s"' % self.gds_format_integer(self.maxrecords, input_name='maxrecords'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='recordset', fromsubclass_=False, pretty_print=True):
        super(recordset, self).exportChildren(outfile, level, namespaceprefix_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for fielddefinition_ in self.fielddefinition:
            fielddefinition_.export(outfile, level, namespaceprefix_, name_='fielddefinition', pretty_print=pretty_print)
        for record_ in self.record:
            record_.export(outfile, level, namespaceprefix_, name_='record', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('minrecords', node)
        if value is not None and 'minrecords' not in already_processed:
            already_processed.add('minrecords')
            try:
                self.minrecords = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('maxrecords', node)
        if value is not None and 'maxrecords' not in already_processed:
            already_processed.add('maxrecords')
            try:
                self.maxrecords = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        super(recordset, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'fielddefinition':
            obj_ = fielddefinition.factory()
            obj_.build(child_)
            self.fielddefinition.append(obj_)
            obj_.original_tagname_ = 'fielddefinition'
        elif nodeName_ == 'record':
            obj_ = record.factory()
            obj_.build(child_)
            self.record.append(obj_)
            obj_.original_tagname_ = 'record'
        super(recordset, self).buildChildren(child_, node, nodeName_, True)
# end class recordset


class section(coalesceObjectHistoryType):
    subclass = None
    superclass = coalesceObjectHistoryType
    def __init__(self, key=None, datecreated=None, lastmodified=None, name=None, status=None, noindex=None, modifiedby=None, modifiedbyip=None, objectversion=None, objectversionstatus=None, previoushistorykey=None, disablehistory=None, history=None, recordset=None, section_member=None):
        self.original_tagname_ = None
        super(section, self).__init__(key, datecreated, lastmodified, name, status, noindex, modifiedby, modifiedbyip, objectversion, objectversionstatus, previoushistorykey, disablehistory, history, )
        if recordset is None:
            self.recordset = []
        else:
            self.recordset = recordset
        if section_member is None:
            self.section = []
        else:
            self.section = section_member
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, section)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if section.subclass:
            return section.subclass(*args_, **kwargs_)
        else:
            return section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_recordset(self): return self.recordset
    def set_recordset(self, recordset): self.recordset = recordset
    def add_recordset(self, value): self.recordset.append(value)
    def insert_recordset_at(self, index, value): self.recordset.insert(index, value)
    def replace_recordset_at(self, index, value): self.recordset[index] = value
    def get_section(self): return self.section
    def set_section(self, section): self.section = section
    def add_section(self, value): self.section.append(value)
    def insert_section_at(self, index, value): self.section.insert(index, value)
    def replace_section_at(self, index, value): self.section[index] = value
    def hasContent_(self):
        if (
            self.recordset or
            self.section or
            super(section, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='section', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('section')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='section')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='section', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='section'):
        super(section, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='section')
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='section', fromsubclass_=False, pretty_print=True):
        super(section, self).exportChildren(outfile, level, namespaceprefix_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for recordset_ in self.recordset:
            recordset_.export(outfile, level, namespaceprefix_, name_='recordset', pretty_print=pretty_print)
        for section_ in self.section:
            section_.export(outfile, level, namespaceprefix_, name_='section', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(section, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'recordset':
            obj_ = recordset.factory()
            obj_.build(child_)
            self.recordset.append(obj_)
            obj_.original_tagname_ = 'recordset'
        elif nodeName_ == 'section':
            obj_ = section.factory()
            obj_.build(child_)
            self.section.append(obj_)
            obj_.original_tagname_ = 'section'
        super(section, self).buildChildren(child_, node, nodeName_, True)
# end class section


class history(coalesceObjectType):
    subclass = None
    superclass = coalesceObjectType
    def __init__(self, key=None, datecreated=None, lastmodified=None, name=None, status=None, noindex=None, modifiedby=None, modifiedbyip=None, objectversion=None, objectversionstatus=None, previoushistorykey=None):
        self.original_tagname_ = None
        super(history, self).__init__(key, datecreated, lastmodified, name, status, noindex, modifiedby, modifiedbyip, objectversion, objectversionstatus, previoushistorykey, )
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, history)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if history.subclass:
            return history.subclass(*args_, **kwargs_)
        else:
            return history(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            super(history, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='history', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('history')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='history')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='history', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='history'):
        super(history, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='history')
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='history', fromsubclass_=False, pretty_print=True):
        super(history, self).exportChildren(outfile, level, namespaceprefix_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(history, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(history, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class history


class linkage(coalesceObjectHistoryType):
    subclass = None
    superclass = coalesceObjectHistoryType
    def __init__(self, key=None, datecreated=None, lastmodified=None, name=None, status=None, noindex=None, modifiedby=None, modifiedbyip=None, objectversion=None, objectversionstatus=None, previoushistorykey=None, disablehistory=None, history=None, entity1key=None, entity1name=None, entity1source=None, entity1version=None, linktype=None, entity2key=None, entity2name=None, entity2source=None, entity2version=None, entity2objectversion=None, classificationmarking=None, inputlang=None, label=None):
        self.original_tagname_ = None
        super(linkage, self).__init__(key, datecreated, lastmodified, name, status, noindex, modifiedby, modifiedbyip, objectversion, objectversionstatus, previoushistorykey, disablehistory, history, )
        self.entity1key = _cast(None, entity1key)
        self.entity1name = _cast(None, entity1name)
        self.entity1source = _cast(None, entity1source)
        self.entity1version = _cast(None, entity1version)
        self.linktype = _cast(None, linktype)
        self.entity2key = _cast(None, entity2key)
        self.entity2name = _cast(None, entity2name)
        self.entity2source = _cast(None, entity2source)
        self.entity2version = _cast(None, entity2version)
        self.entity2objectversion = _cast(int, entity2objectversion)
        self.classificationmarking = _cast(None, classificationmarking)
        self.inputlang = _cast(None, inputlang)
        self.label = _cast(None, label)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, linkage)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if linkage.subclass:
            return linkage.subclass(*args_, **kwargs_)
        else:
            return linkage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_entity1key(self): return self.entity1key
    def set_entity1key(self, entity1key): self.entity1key = entity1key
    def get_entity1name(self): return self.entity1name
    def set_entity1name(self, entity1name): self.entity1name = entity1name
    def get_entity1source(self): return self.entity1source
    def set_entity1source(self, entity1source): self.entity1source = entity1source
    def get_entity1version(self): return self.entity1version
    def set_entity1version(self, entity1version): self.entity1version = entity1version
    def get_linktype(self): return self.linktype
    def set_linktype(self, linktype): self.linktype = linktype
    def get_entity2key(self): return self.entity2key
    def set_entity2key(self, entity2key): self.entity2key = entity2key
    def get_entity2name(self): return self.entity2name
    def set_entity2name(self, entity2name): self.entity2name = entity2name
    def get_entity2source(self): return self.entity2source
    def set_entity2source(self, entity2source): self.entity2source = entity2source
    def get_entity2version(self): return self.entity2version
    def set_entity2version(self, entity2version): self.entity2version = entity2version
    def get_entity2objectversion(self): return self.entity2objectversion
    def set_entity2objectversion(self, entity2objectversion): self.entity2objectversion = entity2objectversion
    def get_classificationmarking(self): return self.classificationmarking
    def set_classificationmarking(self, classificationmarking): self.classificationmarking = classificationmarking
    def get_inputlang(self): return self.inputlang
    def set_inputlang(self, inputlang): self.inputlang = inputlang
    def get_label(self): return self.label
    def set_label(self, label): self.label = label
    def hasContent_(self):
        if (
            super(linkage, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='linkage', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('linkage')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='linkage')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='linkage', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='linkage'):
        super(linkage, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='linkage')
        if self.entity1key is not None and 'entity1key' not in already_processed:
            already_processed.add('entity1key')
            outfile.write(' entity1key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.entity1key), input_name='entity1key')), ))
        if self.entity1name is not None and 'entity1name' not in already_processed:
            already_processed.add('entity1name')
            outfile.write(' entity1name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.entity1name), input_name='entity1name')), ))
        if self.entity1source is not None and 'entity1source' not in already_processed:
            already_processed.add('entity1source')
            outfile.write(' entity1source=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.entity1source), input_name='entity1source')), ))
        if self.entity1version is not None and 'entity1version' not in already_processed:
            already_processed.add('entity1version')
            outfile.write(' entity1version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.entity1version), input_name='entity1version')), ))
        if self.linktype is not None and 'linktype' not in already_processed:
            already_processed.add('linktype')
            outfile.write(' linktype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.linktype), input_name='linktype')), ))
        if self.entity2key is not None and 'entity2key' not in already_processed:
            already_processed.add('entity2key')
            outfile.write(' entity2key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.entity2key), input_name='entity2key')), ))
        if self.entity2name is not None and 'entity2name' not in already_processed:
            already_processed.add('entity2name')
            outfile.write(' entity2name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.entity2name), input_name='entity2name')), ))
        if self.entity2source is not None and 'entity2source' not in already_processed:
            already_processed.add('entity2source')
            outfile.write(' entity2source=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.entity2source), input_name='entity2source')), ))
        if self.entity2version is not None and 'entity2version' not in already_processed:
            already_processed.add('entity2version')
            outfile.write(' entity2version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.entity2version), input_name='entity2version')), ))
        if self.entity2objectversion is not None and 'entity2objectversion' not in already_processed:
            already_processed.add('entity2objectversion')
            outfile.write(' entity2objectversion="%s"' % self.gds_format_integer(self.entity2objectversion, input_name='entity2objectversion'))
        if self.classificationmarking is not None and 'classificationmarking' not in already_processed:
            already_processed.add('classificationmarking')
            outfile.write(' classificationmarking=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.classificationmarking), input_name='classificationmarking')), ))
        if self.inputlang is not None and 'inputlang' not in already_processed:
            already_processed.add('inputlang')
            outfile.write(' inputlang=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.inputlang), input_name='inputlang')), ))
        if self.label is not None and 'label' not in already_processed:
            already_processed.add('label')
            outfile.write(' label=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.label), input_name='label')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='linkage', fromsubclass_=False, pretty_print=True):
        super(linkage, self).exportChildren(outfile, level, namespaceprefix_, name_, True, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('entity1key', node)
        if value is not None and 'entity1key' not in already_processed:
            already_processed.add('entity1key')
            self.entity1key = value
        value = find_attr_value_('entity1name', node)
        if value is not None and 'entity1name' not in already_processed:
            already_processed.add('entity1name')
            self.entity1name = value
        value = find_attr_value_('entity1source', node)
        if value is not None and 'entity1source' not in already_processed:
            already_processed.add('entity1source')
            self.entity1source = value
        value = find_attr_value_('entity1version', node)
        if value is not None and 'entity1version' not in already_processed:
            already_processed.add('entity1version')
            self.entity1version = value
        value = find_attr_value_('linktype', node)
        if value is not None and 'linktype' not in already_processed:
            already_processed.add('linktype')
            self.linktype = value
        value = find_attr_value_('entity2key', node)
        if value is not None and 'entity2key' not in already_processed:
            already_processed.add('entity2key')
            self.entity2key = value
        value = find_attr_value_('entity2name', node)
        if value is not None and 'entity2name' not in already_processed:
            already_processed.add('entity2name')
            self.entity2name = value
        value = find_attr_value_('entity2source', node)
        if value is not None and 'entity2source' not in already_processed:
            already_processed.add('entity2source')
            self.entity2source = value
        value = find_attr_value_('entity2version', node)
        if value is not None and 'entity2version' not in already_processed:
            already_processed.add('entity2version')
            self.entity2version = value
        value = find_attr_value_('entity2objectversion', node)
        if value is not None and 'entity2objectversion' not in already_processed:
            already_processed.add('entity2objectversion')
            try:
                self.entity2objectversion = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('classificationmarking', node)
        if value is not None and 'classificationmarking' not in already_processed:
            already_processed.add('classificationmarking')
            self.classificationmarking = value
        value = find_attr_value_('inputlang', node)
        if value is not None and 'inputlang' not in already_processed:
            already_processed.add('inputlang')
            self.inputlang = value
        value = find_attr_value_('label', node)
        if value is not None and 'label' not in already_processed:
            already_processed.add('label')
            self.label = value
        super(linkage, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(linkage, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class linkage


class linkagesection(coalesceObjectHistoryType):
    subclass = None
    superclass = coalesceObjectHistoryType
    def __init__(self, key=None, datecreated=None, lastmodified=None, name=None, status=None, noindex=None, modifiedby=None, modifiedbyip=None, objectversion=None, objectversionstatus=None, previoushistorykey=None, disablehistory=None, history=None, linkage=None):
        self.original_tagname_ = None
        super(linkagesection, self).__init__(key, datecreated, lastmodified, name, status, noindex, modifiedby, modifiedbyip, objectversion, objectversionstatus, previoushistorykey, disablehistory, history, )
        if linkage is None:
            self.linkage = []
        else:
            self.linkage = linkage
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, linkagesection)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if linkagesection.subclass:
            return linkagesection.subclass(*args_, **kwargs_)
        else:
            return linkagesection(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_linkage(self): return self.linkage
    def set_linkage(self, linkage): self.linkage = linkage
    def add_linkage(self, value): self.linkage.append(value)
    def insert_linkage_at(self, index, value): self.linkage.insert(index, value)
    def replace_linkage_at(self, index, value): self.linkage[index] = value
    def hasContent_(self):
        if (
            self.linkage or
            super(linkagesection, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='linkagesection', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('linkagesection')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='linkagesection')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='linkagesection', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='linkagesection'):
        super(linkagesection, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='linkagesection')
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='linkagesection', fromsubclass_=False, pretty_print=True):
        super(linkagesection, self).exportChildren(outfile, level, namespaceprefix_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for linkage_ in self.linkage:
            linkage_.export(outfile, level, namespaceprefix_, name_='linkage', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(linkagesection, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'linkage':
            obj_ = linkage.factory()
            obj_.build(child_)
            self.linkage.append(obj_)
            obj_.original_tagname_ = 'linkage'
        super(linkagesection, self).buildChildren(child_, node, nodeName_, True)
# end class linkagesection


class entity(coalesceObjectHistoryType):
    subclass = None
    superclass = coalesceObjectHistoryType
    def __init__(self, key=None, datecreated=None, lastmodified=None, name=None, status=None, noindex=None, modifiedby=None, modifiedbyip=None, objectversion=None, objectversionstatus=None, previoushistorykey=None, disablehistory=None, history=None, source=None, version=None, entityid=None, entityidtype=None, title=None, linkagesection=None, section=None):
        self.original_tagname_ = None
        super(entity, self).__init__(key, datecreated, lastmodified, name, status, noindex, modifiedby, modifiedbyip, objectversion, objectversionstatus, previoushistorykey, disablehistory, history, )
        self.source = _cast(None, source)
        self.version = _cast(None, version)
        self.entityid = _cast(None, entityid)
        self.entityidtype = _cast(None, entityidtype)
        self.title = _cast(None, title)
        self.linkagesection = linkagesection
        if section is None:
            self.section = []
        else:
            self.section = section
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, entity)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if entity.subclass:
            return entity.subclass(*args_, **kwargs_)
        else:
            return entity(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_linkagesection(self): return self.linkagesection
    def set_linkagesection(self, linkagesection): self.linkagesection = linkagesection
    def get_section(self): return self.section
    def set_section(self, section): self.section = section
    def add_section(self, value): self.section.append(value)
    def insert_section_at(self, index, value): self.section.insert(index, value)
    def replace_section_at(self, index, value): self.section[index] = value
    def get_source(self): return self.source
    def set_source(self, source): self.source = source
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def get_entityid(self): return self.entityid
    def set_entityid(self, entityid): self.entityid = entityid
    def get_entityidtype(self): return self.entityidtype
    def set_entityidtype(self, entityidtype): self.entityidtype = entityidtype
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def hasContent_(self):
        if (
            self.linkagesection is not None or
            self.section or
            super(entity, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='entity', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('entity')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='entity')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='entity', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='entity'):
        super(entity, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='entity')
        if self.source is not None and 'source' not in already_processed:
            already_processed.add('source')
            outfile.write(' source=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.source), input_name='source')), ))
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.version), input_name='version')), ))
        if self.entityid is not None and 'entityid' not in already_processed:
            already_processed.add('entityid')
            outfile.write(' entityid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.entityid), input_name='entityid')), ))
        if self.entityidtype is not None and 'entityidtype' not in already_processed:
            already_processed.add('entityidtype')
            outfile.write(' entityidtype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.entityidtype), input_name='entityidtype')), ))
        if self.title is not None and 'title' not in already_processed:
            already_processed.add('title')
            outfile.write(' title=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.title), input_name='title')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='entity', fromsubclass_=False, pretty_print=True):
        super(entity, self).exportChildren(outfile, level, namespaceprefix_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.linkagesection is not None:
            self.linkagesection.export(outfile, level, namespaceprefix_, name_='linkagesection', pretty_print=pretty_print)
        for section_ in self.section:
            section_.export(outfile, level, namespaceprefix_, name_='section', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('source', node)
        if value is not None and 'source' not in already_processed:
            already_processed.add('source')
            self.source = value
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
        value = find_attr_value_('entityid', node)
        if value is not None and 'entityid' not in already_processed:
            already_processed.add('entityid')
            self.entityid = value
        value = find_attr_value_('entityidtype', node)
        if value is not None and 'entityidtype' not in already_processed:
            already_processed.add('entityidtype')
            self.entityidtype = value
        value = find_attr_value_('title', node)
        if value is not None and 'title' not in already_processed:
            already_processed.add('title')
            self.title = value
        super(entity, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'linkagesection':
            obj_ = linkagesection.factory()
            obj_.build(child_)
            self.linkagesection = obj_
            obj_.original_tagname_ = 'linkagesection'
        elif nodeName_ == 'section':
            obj_ = section.factory()
            obj_.build(child_)
            self.section.append(obj_)
            obj_.original_tagname_ = 'section'
        super(entity, self).buildChildren(child_, node, nodeName_, True)
# end class entity


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'entity'
        rootClass = entity
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'entity'
        rootClass = entity
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'entity'
        rootClass = entity
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'entity'
        rootClass = entity
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from entity import *\n\n')
        sys.stdout.write('import entity as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "coalesceFieldType",
    "coalesceObjectHistoryType",
    "coalesceObjectType",
    "constraint",
    "entity",
    "field",
    "fielddefinition",
    "fieldhistory",
    "history",
    "linkage",
    "linkagesection",
    "record",
    "recordset",
    "section"
]
