#!/bin/bash
#-----------SECURITY CLASSIFICATION: UNCLASSIFIED------------------------
# Copyright 2015 - Lockheed Martin Corporation, All Rights Reserved
#
# Notwithstanding any contractor copyright notice, the government has
# Unlimited Rights in this work as defined by DFARS 252.227-7013 and
# 252.227-7014. Use of this work other than as specifically authorized by
# these DFARS Clauses may violate government rights in this work.
#
# DFARS Clause reference: 252.227-7013 (a)(16) and 252.227-7014 (a)(16)
# Unlimited Rights. The Government has the right to use, modify,
# reproduce, perform, display, release or disclose this computer software
# in whole or in part, in any manner, and for any purpose whatsoever,
# and to have or authorize others to do so.
#
# Distribution Statement D. Distribution authorized to the Department of
# Defense and U.S. DoD contractors only in support of US DoD efforts.
# Other requests shall be referred to the ACINT Modernization Program
# Management under the Director of the Office of Naval Intelligence.
#
#----------------------------UNCLASSIFIED---------------------------------

SCRIPTPATH=$(readlink -f $0)
SCRIPTNAME=$(basename $0)
MYTAG=$(basename $0 .sh)
DIRECTORY=$(dirname $SCRIPTPATH)
declare -x ROLES_CONF="$DIRECTORY/roles.conf"
declare -x ROLES_SQL="$DIRECTORY/createroles.sql"

cd $DIRECTORY

# Source functions
# - global variables are declared in functions
source functions.sh
if [[ -z "$PSQL" ]]; then
    printf -- "[$MYTAG] ERROR: command psql not installed or in PATH\n"
    exit 1
fi

echo "=== Running $SCRIPTNAME $*"

if [ ! -z "$DSS_CONFIG_LOCATION" ]; then
    _parseConfig
fi

_parseCmdLine $*
_checkSettings
_proceed

PSQL_CMD="$PSQL $psqlShowAll -h $dbServerName -U $dbUser -p $dbServerPort"
PSQL_CMD="$PSQL_CMD --set=mydatabase=$database"
PSQL_CMD="$PSQL_CMD --set=myowner=$dbOwner"
PSQL_CMD="$PSQL_CMD --set=myuser=$myUser"
PSQL_CMD="$PSQL_CMD --set=myschema=$schema"

$PSQL_CMD -c "DROP SCHEMA postgis;"
if [[ "${dbUser}" == "postgres" ]]; then
  $PSQL_CMD -c "DROP ROLE enterprisedb;"
  $PSQL_CMD -c "CREATE ROLE enterprisedb LOGIN SUPERUSER INHERIT CREATEDB CREATEROLE REPLICATION CONNECTION LIMIT 10;"
  $PSQL_CMD -c "ALTER USER enterprisedb WITH PASSWORD 'enterprisedb';"
fi

if (( dropExisting )); then
    printf -- "[$MYTAG] Existing '$database' database will be dropped\n"
    _proceed
    $PSQL_CMD $dbUser -c "DROP DATABASE \"$database\""
fi

if (( dropRoles )); then
    printf -- "[$MYTAG] Drop database roles?\n"
    _proceed
    # Build list in reverse in case of dependencies
    ROLE_LIST=""
    for i in $(grep '^[a-z].*:' $ROLES_CONF|cut -d: -f1); do
        ROLE_LIST="$i $ROLE_LIST"
    done
    for i in $ROLE_LIST; do
        i=$(echo $i|cut -d: -f1)
        printf -- "[$MYTAG] - $i: "
        _runPsql DROP ROLE $i
    done
fi

# Create Roles ---------------------------------------------------------------
printf -- "-- This SQL script is autogenerated. Do not edit.\n"  > $ROLES_SQL
printf -- "-- Generated by: $SCRIPTNAME on $(date)\n"           >> $ROLES_SQL
printf -- "-- Maintain files in data-storage GIT repo:\n"       >> $ROLES_SQL
printf -- "--     roles:  $(basename $ROLES_CONF)\n"            >> $ROLES_SQL
printf -- "--     script: $SCRIPTNAME\n\n"                      >> $ROLES_SQL
for i in $(grep '^[a-z].*:' $ROLES_CONF 2>/dev/null); do
    i_fsdname=$(echo $i|cut -d: -f1)
    i_isdname=$(echo $i|cut -d: -f2)
    i_md5pw=$(echo $i|cut -d: -f3)
    i_connlimit=$(echo $i|cut -d: -f4)
    i_options=$(echo $i|cut -d: -f5)
    i_comment=$(echo $i|cut -d: -f6)
    printf -- "-- Role: $i_fsdname"                             >> $ROLES_SQL
    if [[ -n "$i_isdname" ]]; then
        printf -- " (ISD: $i_isdname)"                          >> $ROLES_SQL
    fi
    printf -- "\nCREATE ROLE $i_fsdname"                        >> $ROLES_SQL
    if [[ "$i_fsdname" != "omegadbg" ]]; then
        printf -- " LOGIN\n"                                    >> $ROLES_SQL
    else printf -- "\n"                                         >> $ROLES_SQL
    fi
    if [[ -n "$i_md5pw" ]]; then
        printf -- "  ENCRYPTED PASSWORD '$i_md5pw'\n"           >> $ROLES_SQL
    fi
    printf -- "  $i_options CONNECTION LIMIT $i_connlimit;\n"   >> $ROLES_SQL
    if [[ "$i_fsdname" =~ omegadb[ag] ]]; then
        printf -- "UPDATE pg_authid SET rolcatupdate=false"     >> $ROLES_SQL
        printf -- " WHERE rolname='$i_fsdname';\n"              >> $ROLES_SQL
    fi
    if [[ "$i_fsdname" = "omegadba" ]]; then
        printf -- "GRANT omegadbg TO $i_fsdname;\n"             >> $ROLES_SQL
    fi
    printf -- "COMMENT ON ROLE $i_fsdname IS '$i_comment';\n\n" >> $ROLES_SQL
done
chmod 640 $ROLES_SQL
$PSQL -f $ROLES_SQL

# Exit on error
#set -e

# Create Database
$PSQL_CMD -f CreateCoalesceDB.sql

# Create uuid-ossp extension
$PSQL_CMD $database -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"

# Add DSS tables and functions
$PSQL_CMD $database -f SetupDSS.sql

$PSQL -U $dbUser -d $database -tAc "DROP SCHEMA postgis cascade;"
$PSQL -U $dbUser -d $database -tAc "CREATE SCHEMA postgis AUTHORIZATION enterprisedb;"
$PSQL -U $dbUser -d $database -tAc "CREATE EXTENSION postgis WITH SCHEMA postgis;"
$PSQL_CMD -c "ALTER DATABASE $database SET search_path TO \"\$user\", postgis, public, topology;"

echo "=== End $SCRIPTNAME $*"

touch /usr/local/bin/DSS_SETUP_INSTALLED

exit 0
