def read():

    <Standalone>

def search():
    <Standalone>

def create():
    <No longer standalone>
    tempEntity = CoaleseEntity(server = ....)

    tempEntity.create()

    status = tempEntity.send()

    return status

 

def delete():
    <Standalone>
 

def update():
    <Not standalone>
 

def get_links(GUID):

    <API request>

 

class CoalesceEntity(GUID=None, template = whatever, records = {}, links = [], server=CoalesceServer):

 

    __init__():

 

        if GUID:

 

            self  = read()

 

        data = dict()

        links = []

        created = False

        have_keys = False

 

 

    @staticmethod

    def read():

 

        return (CoalesceEntity)

 

    @staticmethod

    def create():

        <Create data object>

        return (CoalesceEntity)

 

    def add_data():

 

    def delete():

        <Send request>

 

    def update(records = {}, record_keys = True):

        if record_keys and not have_keys:

            self.data = self.read()

        <Create/modify data object>

 

    def create_link():

        <Create/modify links object>

 

    def get_links():

        <Parse the data object>

 

    def delete_links():

        <Send request>

 

    def send():

        if not create:

            <Send create request with the object>

            created = True

        else:

            <Send update request with the object>

        <Send create links request>

 

 

 

import pyCoalesce as pc

from pyCoalesce import CoalesceEntity

 

stat = pc.read()

pc.update()